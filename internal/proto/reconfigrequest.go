// Autogenerated jute compiler
// @generated from 'zookeeper.jute'

package proto // github.com/facebookincubator/zk/internal/proto

import (
	"fmt"

	"github.com/go-zookeeper/jute/lib/go/jute"
)

type ReconfigRequest struct {
	JoiningServers string // joiningServers
	LeavingServers string // leavingServers
	NewMembers     string // newMembers
	CurConfigId    int64  // curConfigId
}

func (r *ReconfigRequest) GetJoiningServers() string {
	if r != nil {
		return r.JoiningServers
	}
	return ""
}

func (r *ReconfigRequest) GetLeavingServers() string {
	if r != nil {
		return r.LeavingServers
	}
	return ""
}

func (r *ReconfigRequest) GetNewMembers() string {
	if r != nil {
		return r.NewMembers
	}
	return ""
}

func (r *ReconfigRequest) GetCurConfigId() int64 {
	if r != nil {
		return r.CurConfigId
	}
	return 0
}

func (r *ReconfigRequest) Read(dec jute.Decoder) (err error) {
	if err = dec.ReadStart(); err != nil {
		return err
	}
	r.JoiningServers, err = dec.ReadString()
	if err != nil {
		return err
	}
	r.LeavingServers, err = dec.ReadString()
	if err != nil {
		return err
	}
	r.NewMembers, err = dec.ReadString()
	if err != nil {
		return err
	}
	r.CurConfigId, err = dec.ReadLong()
	if err != nil {
		return err
	}
	if err = dec.ReadEnd(); err != nil {
		return err
	}
	return nil
}

func (r *ReconfigRequest) Write(enc jute.Encoder) error {
	if err := enc.WriteStart(); err != nil {
		return err
	}
	if err := enc.WriteString(r.JoiningServers); err != nil {
		return err
	}
	if err := enc.WriteString(r.LeavingServers); err != nil {
		return err
	}
	if err := enc.WriteString(r.NewMembers); err != nil {
		return err
	}
	if err := enc.WriteLong(r.CurConfigId); err != nil {
		return err
	}
	if err := enc.WriteEnd(); err != nil {
		return err
	}
	return nil
}

func (r *ReconfigRequest) String() string {
	if r == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReconfigRequest(%+v)", *r)
}
